<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;

const int N = 3 * 1e5 + 10;
int n, m, u, v, wt;
vector<int> parent(N), _size(N);

void make(int v) {
    parent[v] = v;
    _size[v] = 1;
}

int find(int v) {
    if (v == parent[v]) return v;
    // Path Compression
    return parent[v] = find(parent[v]);
}

void Union(int a, int b) {
    a = find(a); 
    b = find(b);
    if (a != b) {
        // Union by size
        if (_size[a] < _size[b]) swap(a, b);
        // bade tree ke andar chota tree
        // bada tree on left(a)
        parent[b] = a;
        _size[a] += _size[b];
    }
}

// stores size of component of vertex v
int get_size(int v) {
    if(parent[v] == v) return _size[v];
    else return get_size(parent[v]);
}

int main() {
    cin >> n >> m;

    vector<pair<int ,pair<int,int>>> edges;
    for (int i = 0; i < m; i++) {
        cin >> u >> v >> wt;
        edges.push_back({wt, {u, v}});
    }
    sort(edges.begin(), edges.end());

    for (int i = 1; i<=n; i++) make(i);

    int totalCost = 0;
    for (auto &V : edges) {
        int wt = V.first, u = V.second.first, v = V.second.second;
        if (find(u) == find(v)) continue;

        Union(u, v);
        totalCost += wt;
        cout << u << ' ' << v << '\n';
    }
    cout << totalCost << endl;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>kruskal</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
