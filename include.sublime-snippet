<snippet>
	<content><![CDATA[
//     SIEVE PRIME NO. 
const int N = 1e6;
vector<bool> is_prime(N,1);
void sieve(){
    for (int i = 2; i*i<=N; i++){
        if(is_prime[i]){
            for (int j = i*i; j<=N; j+=i){
                is_prime[j] = 0;
            }
        }
    }
 }


//     INVERSE MODULO 
int binpow(int b, int p){
int r = 1;
while(p){
         if(p&1) r = (r*b)%MOD;
         b = (b*b)%MOD;
         p /= 2;
     }
     return r;
 }


//     PRIME FACTORISATION
void primeFact(int n){
     for(int i = 2; i*i<=n; i++){
         if(n%i == 0){
             int cnt = 0;
             while(n%i == 0){
                 cnt++;
                 n /= i;
             }
             cout << i << "^" << cnt << endl;
            
         }
        
     }
     if(n>1){
         cout << n << "^" << 1 << endl;
     }
 }


//     BINARY EXPONENTIATION
int power(int a, int n){
     int res = 1;
     while(n){
         if (n%2 == 1) {
         res *= a, n--;
         }
         else{
             a *= a, n/=2;
         }
     }
     return res;
 }


//     SQUARE ROOT BINARY SEARCH
float squareRoot(int number){
    int precision=15;
    int start = 0, end = number;
    int mid;
    float ans;
    while (start <= end) {
         mid = (start + end) / 2;
         if (mid * mid == number) {
             ans = mid;
             break;
        }
        if (mid * mid < number) {
             start = mid + 1;
             ans = mid;
         }else {end = mid - 1; }   }  float increment = 0.1;
    for (int i = 0; i < precision; i++) {
         while (ans * ans <= number) {
             ans += increment;
        }ans = ans - increment;
        increment = increment / 10;
    }
    return ans;
}

const int MAXN = 2e6;
const int MOD = 1e9 + 7;
int fac[MAXN + 1];
int inv[MAXN + 1];
int exp(int x,int n,int m){x%=m;int res = 1; while(n>0){if(n%2==1){res=res*x%m;}x=x*x%m;n/=2;}return res;}
void factorial(){fac[0]=1;for(int i = 1; i <= MAXN; i++) { fac[i] = fac[i - 1] * i % MOD; }}
void inverses() {inv[MAXN] = exp(fac[MAXN], MOD - 2, MOD);for (int i = MAXN; i >= 1; i--) { inv[i - 1] = inv[i] * i % MOD; }}
int choose(int n, int r) { if(r>n)return 0ll;return (fac[n] * inv[r] % MOD * inv[n - r] % MOD)%MOD;}

int random(int s, int e){return s + rand() % (e - s + 1);}
int flip(int n){ forr(i,0,31){ int num = 1<<i; if(num > n) break; n = n xor num;} return n; }
ll power(ll x, ll y){ ll res = 1; while (y > 0){ if (y & 1) res = (ll)(res*x); y = y>>1; x = (ll)(x*x); } return res; }
vp countArr(vi &arr, ll n){ vp v1; forr(i,0,n-1){ ll cnt = 1; while(i < n-1 && arr[i] == arr[i+1]){ cnt++, i++; } v1.pb({arr[i], cnt}); } if((n > 1 && arr[n-1] != arr[n-2]) || n == 1) v1.pb({arr[n-1], 1}); return v1;}
ll gcd(ll a, ll b){if(b == 0) return a; return gcd(b, a%b);}
ll lcm(ll a, ll b){return a*b/gcd(a,b);}
vi factors(ll n){ vi fac; for (ll i = 1; i * i <= n; i++){ if (n % i == 0){ fac.pb(i); if (i * i != n)fac.pb(n / i); } } return fac; }
ll maxPow2(ll n){n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8; n |= n >> 16; return (n + 1);}
vp primeFactors(ll n){ vp v; for (ll j = 2; j <= sqrtl(n); j++){ ll cnt = 0; while(n%j == 0) n /= j, cnt++; if(cnt)v.pb({j,cnt}); } if(n!=1) v.pb({n,1}); return v;}
 
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>code</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
