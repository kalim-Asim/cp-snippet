<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>

using namespace std;

#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);

#define INF 1e18
#define MAX LLONG_MAX
#define MIN LLONG_MIN
#define MOD 1000000007
#define int long long int
#define nline "\n"
#define ff first
#define ss second
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define yes cout << "YES\n"
#define no cout << "NO\n"
#define ret(n) cout <<setprecision(20)<<n<<endl
#define si set<int>
#define sc set<char>
#define vi vector<int>
#define mii map<int, int>
#define mic map<int,char>
#define pii pair<int, int>
#define vin(a) for(int i = 0; i < (a).size(); ++i) cin >> a[i];
#define vout(a) for(int i = 0; i < (a).size(); ++i) cout << a[i] << ' ';

#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif


void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(double t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

signed main()
{
    fastio();
#ifndef ONLINE_JUDGE
    freopen("Error.txt", "w", stderr);
#endif
   	
   	/* CODE GOES HERE */
   	<------------------>
   	
} 

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>testing</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
