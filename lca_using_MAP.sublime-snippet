<snippet>
	<content><![CDATA[

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node *left, *right;
};

Node* newNode(int data)
{
    Node* node = new Node;
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return (node);
}

unordered_map<Node*, Node*> buildParentMap(Node* root)
{
    unordered_map<Node*, Node*> parentMap;
    parentMap[root] = NULL;
    queue<Node*> queue;
    queue.push(root);
    while (!queue.empty()) {
        Node* node = queue.front();
        queue.pop();
        if (node->left != NULL) {
            parentMap[node->left] = node;
            queue.push(node->left);
        }
        if (node->right != NULL) {
            parentMap[node->right] = node;
            queue.push(node->right);
        }
    }
    return parentMap;
}

int findLCA(Node* root, int n1, int n2)
{
    unordered_map<Node*, Node*> parentMap = buildParentMap(root);

    Node* p = NULL;
    Node* q = NULL;
    queue<Node*> queue;
    queue.push(root);
    while (!queue.empty()) {
        Node* node = queue.front();
        queue.pop();
        if (node->data == n1) p = node;
        if (node->data == n2) q = node;
        if (node->left != NULL) queue.push(node->left);
        if (node->right != NULL) queue.push(node->right);
    }

    set<Node*> ancestors;
    while (p != NULL) { ancestors.insert(p); p = parentMap[p]; }
    while (q != NULL) 
    {
        if (ancestors.find(q) != ancestors.end()) return q->data;
        q = parentMap[q];
    }

    return -1; // No common ancestor found
}

int main()
{
    Node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(6);
    root->right->right = newNode(7);

    cout << "LCA(4, 5) = " << findLCA(root, 4, 5) << endl;
    cout << "LCA(4, 6) = " << findLCA(root, 4, 6) << endl;
    cout << "LCA(3,4) = " << findLCA(root, 3, 4) << endl;
    cout << "LCA(2, 4) = " << findLCA(root, 2, 4) << endl;

    return 0;
}


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lca_using_MAP</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
