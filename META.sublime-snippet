<snippet>
	<content><![CDATA[
#include <bits/stdc++.h>
using namespace std;
#define MOD     1000000007
#define int     long long int
#define pb      push_back
#define MAX     LLONG_MAX
#define MIN     LLONG_MIN
#define ff first
#define ss second
#define vi      vector<int>
#define mii     map<int, int>
#define pii     pair<int, int>
#define no      cout << "NO\n"
#define yes     cout << "YES\n"
#define sz(x)   ((int)(x).size())
#define all(x)  (x).begin(), (x).end()
#define ret(n)  cout <<fixed<<setprecision(6)<<n<<"\n"
#define vin(a)  for(int i = 0; i < (a).size(); ++i) cin >> a[i];
#define vout(a) for(int i = 0; i < (a).size(); ++i) cout << a[i] << ' ';

void solve() {
    
}
void main_() {
    // implement your solution here
    int t; cin >> t; 
    for (int i = 1; i <= t; i++) {
        printf("Case #%d: ", i);
        solve();
    }
}
static void run_with_stack_size(void (*func)(void), size_t stsize) {
    char *stack, *send;
    stack = (char *)malloc(stsize);
    send = stack + stsize - 16;
    send = (char *)((uintptr_t)send / 16 * 16);
    asm volatile(
        "mov %%rsp, (%0)\n"
        "mov %0, %%rsp\n"
        :
        : "r"(send));
    func();
    asm volatile("mov (%0), %%rsp\n" : : "r"(send));
    free(stack);
}
signed main() {
    run_with_stack_size(main_, 1024 * 1024 * 1024); // run with a 1 GiB stack
    return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hackerCup</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
